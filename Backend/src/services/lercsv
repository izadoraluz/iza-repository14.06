const fs = require("fs");
const { parse } = require("csv-parse");
const csv = require('csv-parse')
const {resolve} = require('path')
const sqlite = require('sqlite3').verbose()
const db = new sqlite.Database(resolve(__dirname,"..","database","banco_de_dados_ipt_grupo02.db"))

const caminhos = resolve(__dirname,'teste.json')
function escrever(caminho, conteudo){
  fs.promises.writeFile(caminho,conteudo, {
  flag:'w',
})
}
const data = [
  { name: 'João', age: 30, city: 'São Paulo' },
  { name: 'Maria', age: 25, city: 'Rio de Janeiro' },
  { name: 'Pedro', age: 40, city: 'Belo Horizonte' }
];



const stream = fs.createWriteStream('data.csv', { flags: 'a' });
const headers = ['name', 'age', 'city'];
function escrever (caminho,data,headers){
  const stream = fs.createWriteStream(caminho, { flags: 'a' });
  stream.write(headers.join(';') + '\n');
  const dados = Object.values(data)
  stream.write(dados.join(';') + '\n')
}
// escrever(resolve(__dirname,"..","..","data","E","teste.csv",),{ name: 'João', age: 30, city: 'São Paulo' },headers)
// console.log('Arquivo CSV escrito com sucesso!');


exports.tratar_csv = function(data){
  const readableStream = require('stream').Readable;
  const stream = new readableStream();
  const results = [];
  stream.push(data);
  stream.push(null);
  stream
  csv({ separator: ';' })
  .on('data', (data) => results.push(data))
  .on('end', () => {
      // Término da leitura do arquivo CSV
      return results
      
  });
}

armazenar = function (arquivo, tabela){
  fs.createReadStream(arquivo)
  .pipe(parse({ delimiter: ";",columns:true , from_line: 1 }))
  .on("data", function (row) {
    
    const data = parseFloat(row['Data/Hora'])
    let a = (data - 25569) * 86400 * 1000
    let datta =  new Date(a)
    row.id_vagao = 2
    row.tipo_choque = "3"
    var x = row
    console.log();
    console.log(row)
    let keys =[]
    for(let i =0; i<1; i++){
        Object.keys(row).forEach((value)=>{
        keys.push(value)
    }) 
    }
    console.log(Object.values(row))
    console.log(keys.join(','))
    let values = Object.values(row).map(value =>{
        return value.toString().replace(',','.')
    })
    let map = values.map(value =>{
        if(/[a-zA-Z]/.test(value)){
            return `"${value}"`
        }
        return parseFloat(value)
    })
    console.log(map)
    var sql = `INSERT into ${tabela}(${keys.join(',')}) values(${map.join(',')})`
    db.all(sql,[],(err,row)=>{
        if(err){
            return console.log(err)
        }
        console.log('sucesso')
    })
    console.log(sql)
  })
  .on("end", function () {
    console.log("finished");
    
  })
  .on("error", function (error) {
    console.log(error.message);
  });
}

 